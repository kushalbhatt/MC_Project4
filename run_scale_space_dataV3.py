# % Obatin the Difference Of Gaussian for one dimension signal
# % Skip the detail of the space theory
# % Input:
# % data - one dimension siganl (n x 1)
# % samplingRatio - an array (1 x s), the different sampling ratios
# % gaussian_sigmas - an array (1 x m), the different sigmas for gaussian filter
# %
# % Output:
# % scale_space_data - s x 1 cell, each cell is generated by the differnt sampling (Octave data)
# %                                each cell is 2D array ((m-1) x k), the DoG data by the different gaussian sigma
# %                                (each row data is a DoG data genereting by two different gaussian sigma)
import numpy as np
import gaussianFilteringbySigma
def run_scale_space_dataV3(data):
    samplingRatios = [1,2,4]
    gaussian_sigmas = [1,2,4,8,16]
    DoG_data = []
    space_scale_data = []

    #downsample the data
    sampled_data = data[::samplingRatios[0]]

    for i in range(len(samplingRatios)):
        octave_DoG_data = []
        octave_original_data = []
        scale_step = [gaussian_sigmas[i] * np.power(2,1.0/4), gaussian_sigmas[i] * np.power(2,1.0/2),gaussian_sigmas[i] * np.power(2,3.0/4),gaussian_sigmas[i] * 2]
        for j in range(len(scale_step)):

            if j==1:
                if i==1:
                    L1 = sampled_data
                    L1_ver2 = L1
                    octave_sampled_data = sampled_data
                    #appending each entry from (1 x P) array to octave_sampled_data as rows (P rows)
                    for x in octave_sampled_data:
                        octave_original_data.append(x)
                else:
                    L1 = L1[::2] #downsmaple
                    L1_ver2 = L1
                    octave_sampled_data = L1
                    for x in octave_sampled_data:
                        octave_original_data.append(x)

            L2 = gaussianFilteringbySigma(octave_sampled_data,scale_step[j],len(octave_sampled_data))
            DoG = L2 - L1
            L1 = L2
            for x in DoG:
                octave_DoG_data.append(x)
            for x in L2:
                octave_original_data.append(x)

        #not sure if this is right way of doing it....   i - th entry is to be added
        DoG_data.append(octave_DoG_data)
        space_scale_data.append(octave_original_data)

        return(DoG_data,space_scale_data)
